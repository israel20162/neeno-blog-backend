generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  password      String
  emailVerified Boolean?
  image         String?
  userType      UserType  @default(BASIC)
  posts         Post[]
  accounts      Account[]
  session       Session[]
  comments      Comment[]
  replies       Reply[]
}

enum UserType {
  ADMIN
  BASIC
  EDITOR
}

model Session {
  id           String @id @default(cuid())
  sessionToken String @unique
  userId       Int
  expires      Int?
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id         Int       @id  @default(autoincrement())
  title      String
  content    String?
  Image      String?
  created_at DateTime  @default(now())
  published  Boolean   @default(false)
  author     User?     @relation(fields: [authorId], references: [id])
  authorId   Int
  tags       Tags[]
  comments   Comment[]
}

model Comment {
  id         String   @id @default(cuid())
  content    String?
  post       Post?    @relation(fields: [postId], references: [id])
  postId     Int?
  user       User?    @relation(fields: [userId], references: [id])
  userId     Int?
  created_at DateTime @default(now())
  likes      Int? @default(0)
  dislikes   Int? @default(0)
  published  Boolean  @default(false)
  replies    Reply[]
}

model Reply {
  id         String   @id @default(cuid())
  content    String?
  comment    Comment? @relation(fields: [commentId], references: [id])
  created_at DateTime @default(now())
  commentId  String
  user       User?    @relation(fields: [userId], references: [id])
  userId     Int?
}

model Tags {
  id    String @id @default(cuid())
  title String @unique
  posts Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
